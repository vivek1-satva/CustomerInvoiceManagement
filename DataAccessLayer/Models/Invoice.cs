using MongoDB.Bson;using MongoDB.Bson.Serialization.Attributes;using System;using System.Collections.Generic;using System.ComponentModel.DataAnnotations;namespace DataAccessLayer.Models{    public class Invoice    {        [BsonId]        [BsonRepresentation(BsonType.ObjectId)]        public string? Id { get; set; }        [Required(ErrorMessage = "Invoice number is required.")]
        [RegularExpression(@"^[a-zA-Z0-9-]*$", ErrorMessage = "Invoice number must be in correct format")]        public string InvoiceNumber { get; set; }        [Required(ErrorMessage = "Invoice Date is required.")]        public DateTime InvoiceDate { get; set; }        [Required(ErrorMessage = "Due date is required.")]        public DateTime DueDate { get; set; }        [Required(ErrorMessage = "Billing address is required.")]        public Address BillingAddress { get; set; }        [Required(ErrorMessage = "Shipping address is required.")]        public Address ShippingAddress { get; set; }        [Required(ErrorMessage = "Customer ID is required.")]        public string CustomerId { get; set; }

        //[Required(ErrorMessage = "At least one line item is required.")]
        //public List<ItemInvoice> LineItems { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Total must be a positive number.")]        public double? Total { get; set; }        [Range(0, 100, ErrorMessage = "Discount must be between 0 and 100.")]        public int Discount { get; set; }        [Range(0, double.MaxValue, ErrorMessage = "Discount amount must be a positive number.")]        public double? DiscountAmount { get; set; }        [Range(0, double.MaxValue, ErrorMessage = "Shipping charges must be a positive number.")]        public double ShippingCharges { get; set; }        [Range(0, double.MaxValue, ErrorMessage = "Net amount must be a positive number.")]        public double? NetAmount { get; set; }    }    public class Address    {        [Required(ErrorMessage = "Street address is required.")]        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Invalid street address format. Only letters and spaces are allowed.")]        public string StreetAddress { get; set; }        [Required(ErrorMessage = "City is required.")]        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Invalid city format. Only letters and spaces are allowed.")]        public string City { get; set; }        [Required(ErrorMessage = "Postal code is required.")]        [RegularExpression(@"^\d{6}$", ErrorMessage = "Invalid postal code format.")]        public string PostalCode { get; set; }

        [Required(ErrorMessage = "Country is required.")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Invalid country format. Only letters are allowed.")]
        public string Country { get; set; }        [Required(ErrorMessage = "State is required.")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Invalid state  format. Only letters are allowed.")]
        public string State { get; set; }    }}